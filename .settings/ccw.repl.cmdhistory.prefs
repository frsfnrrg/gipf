cmdhistory=[";; Switching to gipf.core namespace" "and" ";; Switching to gipf.core namespace" "(defn -main\\n  \\"See \\\\\\"GIPF\: I play the game\\\\\\" for details.\\"\\n  [& args]\\n  ;(println args \\"Hello, World\!\\")\\n  (let [[game-up game-img ] (get-game)\\n        window (javax.swing.JFrame. \\"GIPF\\")\\n        panel (proxy [javax.swing.JPanel] []\\n                (paint [^java.awt.Graphics g]\\n                  (.setColor g (java.awt.Color. 255 255 255))\\n                  (.fillRect g 0 0 25 100)\\n                  ;; (.drawImage (game-img) 0 0 this)\\n                  )\\n                )\\n        menubar (javax.swing.JMenuBar.)\\n        mode-basic (javax.swing.JRadioButtonMenuItem. \\"Basic\\")\\n        mode-normal (javax.swing.JRadioButtonMenuItem. \\"Normal\\")\\n        mode-advanced (javax.swing.JRadioButtonMenuItem. \\"Advanced\\")\\n        \\n        button-new (javax.swing.JMenuItem. \\"New\\")\\n        button-quit (javax.swing.JMenuItem. \\"Quit\\")\\n        ]\\n    \\n    (doto (javax.swing.ButtonGroup.)\\n      (.add mode-basic)\\n    \\n    (doto menubar\\n      ;; selector menu... use radiobutton?\\n      (.add (doto (javax.swing.JMenu. \\"Mode\\")\\n              (.add mode-basic)\\n              (.add mode-normal)\\n              (.add mode-advanced)))\\n      (.add (doto (javax.swing.JMenu. \\"Game\\")\\n              (.add button-new)\\n              (.add button-quit))))\\n    \\n    (doto panel\\n      (.setMinimumSize (java.awt.Dimension. 800 800))\\n      (.setMaximumSize (java.awt.Dimension. 800 800)))\\n    \\n    (doto window\\n      (.setJMenuBar menubar)\\n      (.setDefaultCloseOperation javax.swing.WindowConstants/DISPOSE_ON_CLOSE)\\n      (.setContentPane panel)\\n      (.setSize 800 800)\\n      (.setResizable false)\\n      (.setVisible true))\\n    \\n    true\\n  ))" ";; Switching to gipf.core namespace" "prev" "(var 1)" "(var 'b)" "(var 'b 1)" "(var (symbol 'q) 1)" "(symbol \\"1\\")" "(symbol \\"dogfooding\\")" "(var (symbol \\"Koo\\"))" "(symbol \\"Koo\\")" "(clojure.lang.Var. (symbol \\"Koo\\"))" "(clojure.lang.Var. (symbol \\"Koo\\") 1)" ";; Switching to gipf.core namespace" "(point* 1 (list 2 3))" "(point* 155 (list 44 44)\\n  )" "(interpolate-list (list 0 2) (list 3 4) 3)" "2N" "(type 2N)" "(get-ring-of-hex-uv-points 3)" "(count (get-ring-of-hex-uv-points 3))" "(count (get-ring-of-hex-uv-points 4\\n         ))" "(get-ring-of-hex-uv-points 2)" "(pt 1 2 3)" "(pt-xy *1)" "(pt->xy *1)" "(def jkl (pt 1 0 -1))" "(pt-xy jkl)" "(pt->xy jkl)" "(pt\= (pt 0 0 0) (pt 0 0 0))" "(pt\= (pt 1 0 0) (pt 0 1 -1))" "(rest ())" "(rest (list 1 2))" "(third (list 1 2 3))" "(third (list 1 2 ))" "(first ())" "(empty? (rest (list 1)))" "(empty? (rest (rest (list 1))))" "(pt\= (pt 1 0 0) (pt 0 1 -1))" "(\= 1 1N)" "(\= 1 1.0)" "(\= 1 1.0N)" "(pt\= (pt 1 0 0) (pt 0 1 -1))" "(pt\= (pt 2 0 0) (pt 0 2 -2))" "(pairwise-and \= 0 0 0 0 0)" "(pairwise-and \= (list 0 0 0 0 0))" "(redraw\!)" "(redraw\! 1 2 3)" "(get-ring-of-hex-uv-points 3)" "(make-hex-array (constantly 2) 3)" "(pt->N (pt 1 2 3))" "(defn chk [p] (pt\= p (normalize-to-uv p)))" "(chk (pt 1 2 3))" "(chk (pt 0 0 0))" "(chk (pt 0 1 0))" "(chk (pt 5 5 0))" "(chk (pt 0 0 1))" "(normalize-to-uv 0 0 1)" "(normalize-to-uv (pt 0 0 1))" "(chk (pt 0 0 1))" "(chk (pt 0 2 5))" "(pt->N (pt 1 2 3))" "(pt->N (pt 1 1 0))" "(N->pt 1)" "(for [i (range 50)]\\n  (\\n    ))" "(for [i (range 50)]\\n  (hexagonal-number i))" "(for [i (range 50)]\\n     (sqrt (hexagonal-number i)))" "(N->pt 5)" "(N->pt 0)" "(N->pt 1)" "(reverse-hex-floor 8)" "(reverse-hex-floor 1)" "(reverse-hex-floor 2)" "(reverse-hex-floor 7)" "(hexagonal-number (reverse-hex-floor 7))" "(hexagonal-number (reverse-hex-floor 8))" " (hexagonal-number (reverse-hex-floor 8))" "(hexagonal-number (reverse-hex-floor 6))" "(hexagonal-number (reverse-hex-floor 5))" "(hexagonal-number (reverse-hex-floor 7))" "(hexagonal-number 2)" "(hexagonal-number (reverse-hex-floor 7))" " (hexagonal-number (reverse-hex-floor 8))" "(hexagonal-number (reverse-hex-floor 8))" "(hexagonal-number (reverse-hex-floor 7))" "(hexagonal-number (reverse-hex-floor 6))" "(hexagonal-number (reverse-hex-floor 7))" "(hexagonal-number (reverse-hex-floor 8))" "(N->pt 1)" "(N->pt 6)" "(N->pt 7)" "(N->pt 10000)" "(N->pt 100000000000000000000)" "(N->pt 10000000000)" "(N->pt 1)" "(N->pt 2)" "(N->pt 8)" "(N->pt 1000)" "(pt->N (N->pt 1000))" "(pt->N (N->pt 1020))" "(checkme 1)" "(checkme 2)" "(checkme 3)" "(checkme 4)" "(checkme 5)" "(min 1 2 3)" "(map-hex-array println (make-hex-array (constantly 1) 3))" "(checkme 7)" "(checkme 35)" "(checkme 55)" "*ns*" "(checkme 50)" "(checkme 2000)" "(pt-int (pt 1.0 2.4 5.5))" "(pt-int (pt 1.0 2.4 6.5))" "(xy->pt (xy 1 1))" "sqrt3o6" "(xy->pt (xy 1 1))" "(xy->pt (pt->xy (pt 1 1 1)))" "(xy->pt (pt->xy (pt 2 1 0)))" "(xy->pt (pt->xy (pt 200 100 0)))" "(pt->xy (pt 0 1 0))" "(xy-v)" "xy-v" "(pt->xy (pt 1 0 0))" "(xy->pt (pt->xy (pt 1 0 0)))" "(xy->pt (xy 1 0))" "(xy->pt (xy 0 1))" "(xy->pt (xy 1 0))" "(/ (first xy-u))" "(/ (first xy-v))" "(->XY 1 2)" "(\:x *1)" "(\:y *1)" "(\:y *3)" "(xy->pt (xy 1 2))" "(pt->xy (pt 1.5 1.15 0))" "(xy 1 2)" "*ns*" "(pt 1 2 3)" "(\= (pt 1 2 3) (pt 2 3 4))" "(\= (pt 1 2 3) (pt 3 4 5))" "(\= (pt 1 2 3) (pt 1 2 3))" "(pt\= (pt 1 2 3) (pt 1 2 3))" "(pt+ (pt 1 2 3) (pt 2 3 4))" "(pt-radius (pt 0 0 1))" "(pt-radius (pt 0 0 0))" "(pt-radius (pt 0 2 0))" "(pt-radius (pt 0 2 2))" "(pt-radius (pt 2 -2 2))" "(defn do-on-swing-thread\\n  [thunk]\\n  \\n  \\n  )" "(sqrt 2)" ";; Switching to gipf.core namespace" "(defn -main\\n  \\"See \\\\\\"GIPF\: I play the game\\\\\\" for details.\\"\\n  [& args]\\n  ;(println args \\"Hello, World\!\\")\\n  (let [[game-up game-img] (get-game)\\n        window (javax.swing.JFrame. \\"GIPF\\")\\n        menubar (javax.swing.JMenuBar.)\\n        mode-basic (javax.swing.JRadioButtonMenuItem. \\"Basic\\")\\n        mode-normal (javax.swing.JRadioButtonMenuItem. \\"Normal\\")\\n        mode-advanced (javax.swing.JRadioButtonMenuItem. \\"Advanced\\")\\n        \\n        button-new (javax.swing.JMenuItem. \\"New\\")\\n        button-quit (javax.swing.JMenuItem. \\"Quit\\")\\n        ]\\n    \\n    \\n    (.setSelected mode-basic true)\\n   \\n    (set-on-button-select\! mode-basic\\n      (fn []\\n        (game-up (list [\:state \:basic] [\:state \:new]))))\\n    (set-on-button-select\! mode-normal\\n      (fn []\\n        (game-up (list [\:state \:normal] [\:state \:new]))))\\n    (set-on-button-select\! mode-advanced\\n      (fn []\\n        (game-up (list [\:state \:advanced] [\:state \:new]))))\\n    \\n    (doto (javax.swing.ButtonGroup.)\\n      (.add mode-basic)\\n      (.add mode-normal)\\n      (.add mode-advanced))\\n    \\n    (set-on-button-click\! button-quit\\n      (fn [] (doto window\\n               (.setVisible false)\\n               (.dispose))))\\n    \\n    (set-on-button-click\! button-new\\n      (fn [] (game-up (list [\:state \:new]))))\\n    \\n    (doto menubar\\n      ;; selector menu... use radiobutton?\\n      (.add (doto (javax.swing.JMenu. \\"Mode\\")\\n              (.add mode-basic)\\n              (.add mode-normal)\\n              (.add mode-advanced)))\\n      (.add (doto (javax.swing.JMenu. \\"Game\\")\\n              (.add button-new)\\n              (.add button-quit))))\\n    \\n    (doto panel\\n      (.setMinimumSize (java.awt.Dimension. 800 800))\\n      (.setMaximumSize (java.awt.Dimension. 800 800))\\n      (.setPreferredSize (java.awt.Dimension. 800 800))\\n      (.addMouseListener (proxy [java.awt.event.MouseListener] []\\n                           (mouseClicked [^java.awt.event.MouseEvent e]\\n                             (game-up (list [\:mouse (.getX e) (.getY e) (.getButton e)])))\\n                           (mouseEntered [^java.awt.event.MouseEvent e] nil)\\n                           (mouseExited [^java.awt.event.MouseEvent e] nil)\\n                           (mousePressed [^java.awt.event.MouseEvent e] nil)\\n                           (mouseReleased [^java.awt.event.MouseEvent e] nil))))\\n    \\n    (doto window\\n      (.setJMenuBar menubar)\\n      (.setDefaultCloseOperation javax.swing.WindowConstants/DISPOSE_ON_CLOSE)\\n      (.setContentPane panel)\\n      (.pack)\\n      (.setResizable false)\\n      (.setVisible true))\\n    \\n    true\\n  ))" "(get [1 2 3] 5)" "(pt-radius (pt 4 0 2))" "(make-hex-array (constantly 0) 4)" "(count (second *1))" "(hexagonal-number 5)" "(get-hex-array (new-board) (pt 4 0 1))" "(get-hex-array (new-board) (4 0 0))" "(get-hex-array (new-board) (pt 4 0 0))" "(get-hex-array (new-board) (pt 3 0 0))" "(get-hex-array (new-board) (pt 4 0 0))" "(mapvc println)" "(mapvc println [1 2 3 4])" "*ns*" "(ns gipf.core)" "(mapvc println [1 2 3])" ";; Switching to gipf.core namespace" ";; Switching to gipf.repl namespace" "(not-any pt\= (pt 0 0 0) (list (pt 0 0 0) (pt 1 0 2)))" "*ns*" "(ns gipf.core)" "(not-any? pt\= (pt 0 0 0) (list (pt 0 0 0) (pt 1 0 2)))" "(pt-rot+60 (pt-rot-60 (pt 1 0 0)))" "(pt-rot+60 (pt-rot-60 (pt 1 2 3)))" ";; Switching to gipf.repl namespace" "ns**" "*ns*" ";; Switching to gipf.repl namespace"]
eclipse.preferences.version=1
